# Wykres zapisz w formacie .PNG
curve(dnorm(x),col="red", lwd=4, add=T)
dane2=read.table("ToothGrowth.txt",header=TRUE, sep=",", dec=".")
setwd(C:\\Users\\Bartłomiej\\Desktop\\Nowy folder\\ToothGrowth.txt)
setwd("C:\\Users\\Bartłomiej\\Desktop\\Nowy folder\\ToothGrowth.txt")
setwd("C:\\Users\\Bartłomiej\\Desktop\\Nowy folder\\ToothGrowth.txt")
setwd("C:\\Users\\Bartłomiej\\Desktop\\Nowy folder\\ToothGrowth.txt")
kalk(l1,l2,d){
if(d=="+"){
wynik=l1+l2
}
else if(d=="-"){
wynik=l1-l2
}
else if(d=="*"){
wynik=l1*l2
}
else if(d=="/"){
if(l2==0){print("nie dzielimy przez 0")}
else {
wynik=l1/l2
}
}
}
wynik
l1=5
l2=5
d="+"
kalk(l1,l2,d){
kalk=function(l1,l2,d){
if(d=="+"){
wynik=l1+l2
}
else if(d=="-"){
wynik=l1-l2
}
else if(d=="*"){
wynik=l1*l2
}
else if(d=="/"){
if(l2==0){print("nie dzielimy przez 0")}
else {
wynik=l1/l2
}
}
}
wynik
l1=5
l2=5
d="+"
kalk=function(l1,l2,d){
if(d=="+"){
wynik=l1+l2
}
else if(d=="-"){
wynik=l1-l2
}
else if(d=="*"){
wynik=l1*l2
}
else if(d=="/"){
if(l2==0){print("nie dzielimy przez 0")}
else {
wynik=l1/l2
}
}
}
kalk(5,12,"+")
wynik
wynik
kalk(5,12,"+")
wynik
kalk(5,12,"+")
kalk(5,12,"+")
kalk(5,12,"+")
return(wynik)
kalk(5,12,"+")
bmi2 = function(waga, wzrost) {
bmi = waga / (wzrost ^ 2)
if (bmi < 18.5) {
tekst = c("Niedowaga", bmi)
} else if (bmi >= 18.5 && bmi < 25) {
tekst = c("Optimum", bmi)
} else if (bmi >= 25 && bmi < 30) {
tekst = c("Nadwaga", bmi)
} else if (bmi >= 30) {
tekst = c("Otyłość", bmi)
}
return(tekst)
}
# Wywołajmy funkcję
bmi2(74, 1.81)
kalk(5,12,"+")
kalk(5,12,"+")
wynik
kalk(5,12,"+")
kalk(5,12,+)
kalk(5,12,+)
kalk(5,12,D)
kalk(5,12,"D")
wynik="nie dzielimy przez 0"}
kalk(5,12,"D")
kalk(5,12,"D")
kalk(5,12,"D")
kalk(5,12,D)
kalkulator(5,12,D)
kalkulator=function (x,a,b){
if(x==D){
wynik=a+b
} else if(x==O){
wynik=a-b
} else if(x==M){
wynik=a*b
} else if(x==D){
if(b==0){
wynik="nie dizelimy przez 0"
else{
wynik=a/b
}
}
}
kalkulator(5,12,D)
kalkulator=function(x,a,b){
kalkulator(5,12,D)
kalkulator(5,12,D)
kalk(5,12,"D")
kalk(5,12,"D")
# Wywołajmy funkcję
bmi2(74, 1.81)
bmi2(74, 1.81)
bmi2(74, 1.81)
bmi2 = function(waga, wzrost) {
bmi = waga / (wzrost ^ 2)
if (bmi < 18.5) {
tekst = c("Niedowaga", bmi)
} else if (bmi >= 18.5 && bmi < 25) {
tekst = c("Optimum", bmi)
} else if (bmi >= 25 && bmi < 30) {
tekst = c("Nadwaga", bmi)
} else if (bmi >= 30) {
tekst = c("Otyłość", bmi)
}
return(tekst)
}
bmi2(74, 1.81)
kalk(5,12,"D")
bmi2(74, 1.81)
bmi2(74, 1.81)
kalk(5,12,"D")
bmi2(74, 1.81)
bmi2(74, 1.81)
bmi2 = function(waga, wzrost) {
bmi = waga / (wzrost ^ 2)
if (bmi < 18.5) {
tekst = c("Niedowaga", bmi)
} else if (bmi >= 18.5 && bmi < 25) {
tekst = c("Optimum", bmi)
} else if (bmi >= 25 && bmi < 30) {
tekst = c("Nadwaga", bmi)
} else if (bmi >= 30) {
tekst = c("Otyłość", bmi)
}
return(tekst)
}
bmi2(74, 1.81)
zwierze = "okoń"
if (zwierze == "kot" || zwierze == "pies") {
print("Ssak")
} else if (zwierze == "okoń" || zwierze == "karp") {
print("Ryba")
} else if (zwierze == "sokół" || zwierze == "orzeł") {
print("Ptak")
} else {
print("Zwierzę nieznane")
}
podatek(32000,"liniowo")
podatek=function(kwota,rodzaj){
if(rodzaj="liniowo"){
wynik=kwota*0.92
}
else if(kwaota<32492){
wynik=kwota*0.18-556
}
else if(kwota>32492){
wynik=14832+0.32*(kwota-32492)
}
return(wynik)
}
podatek(32000,"liniowo")
podatek(32000,"liniowo")
# 2. Stwórz funkcję obliczającą podatek w zależności od dochodu.
# Przyjmij następujące założenia:
# a) Jeżeli podatnik rozlicza się liniowo, wtedy niezależnie od kwoty płaci [dwie ostatnie cyfry indeksu]% podatku.
# b) Jeżeli podatnik rozlicza się na zasadach ogólnych, wtedy:
# - poniżej kwoty [pięć ostatnich cyfr indeksu] zł płaci 18% podatku minus kwota zmniejszająca, czyli 556zł;
# - powyżej kwoty [pięć ostatnich cyfr indeksu] zł płaci 14839zł + 32% nadwyżki powyżej [pięć ostatnich cyfr indeksu]zł.
podatek=function(kwota,rodzaj){
if(rodzaj="liniowo"){
wynik=kwota*0.92
}
else if(kwaota<32492){
wynik=kwota*0.18-556
}
else if(kwota>32492){
wynik=14832+0.32*(kwota-32492)
}
return(wynik)
}
podatek(32000,"liniowo")
# 2. Stwórz funkcję obliczającą podatek w zależności od dochodu.
# Przyjmij następujące założenia:
# a) Jeżeli podatnik rozlicza się liniowo, wtedy niezależnie od kwoty płaci [dwie ostatnie cyfry indeksu]% podatku.
# b) Jeżeli podatnik rozlicza się na zasadach ogólnych, wtedy:
# - poniżej kwoty [pięć ostatnich cyfr indeksu] zł płaci 18% podatku minus kwota zmniejszająca, czyli 556zł;
# - powyżej kwoty [pięć ostatnich cyfr indeksu] zł płaci 14839zł + 32% nadwyżki powyżej [pięć ostatnich cyfr indeksu]zł.
podatek=function(kwota,rodzaj){
if(rodzaj="liniowo"){
wynik=kwota*0.92
}
else if(kwota<32492){
wynik=kwota*0.18-556
}
else if(kwota>32492){
wynik=14832+0.32*(kwota-32492)
}
return(wynik)
}
podatek(32000,"liniowo")
podatek(32000,"liniowo")
# 2. Stwórz funkcję obliczającą podatek w zależności od dochodu.
# Przyjmij następujące założenia:
# a) Jeżeli podatnik rozlicza się liniowo, wtedy niezależnie od kwoty płaci [dwie ostatnie cyfry indeksu]% podatku.
# b) Jeżeli podatnik rozlicza się na zasadach ogólnych, wtedy:
# - poniżej kwoty [pięć ostatnich cyfr indeksu] zł płaci 18% podatku minus kwota zmniejszająca, czyli 556zł;
# - powyżej kwoty [pięć ostatnich cyfr indeksu] zł płaci 14839zł + 32% nadwyżki powyżej [pięć ostatnich cyfr indeksu]zł.
podatek=function(kwota,rodzaj){
if(rodzaj=="liniowo"){
wynik=kwota*0.92
}
else if(kwota<32492){
wynik=kwota*0.18-556
}
else if(kwota>32492){
wynik=14832+0.32*(kwota-32492)
}
return(wynik)
}
podatek(32000,"liniowo")
podatek(32000,"nie")
# 1. Stwórz funkcję będącą najprostszą wersją kalkulatora.
kalk=function(l1,l2,d){
if(d=="D"){
wynik=l1+l2
}
else if(d=="O"){
wynik=l1-l2
}
else if(d=="M"){
wynik=l1*l2
}
else if(d=="DZ"){
if(l2==0){
wynik="nie dzielimy przez 0"}
else {
wynik=l1/l2
}
}
return(wynik)
}
kalk(5,12,"D")
podatek(34000,"nie")
kalk(5,12,"DZ")
kalk(5,0,"DZ")
kalk(5,0,"DZ")
plot(1,2,3,4,5)
wektor <- c(1,2,3,4,5)
wektor <- c(1,2,3,4,5)
plot(1,2,3,4,5)
plot(wektor)
plot(x=2y)
plot(x=2y)
plot(wektor)
return(x+2x)
plot(f1)
f1 <- function(x){
return(x+2x)
curve(expr=f1,from=0,to=5)
f1 <- function(x){
return(x+2x)
}
f1 <- function(x){
return(x+2x)
}
library(tidyverse)
a <- "assigning value to a variable"
b = "alternative way of assigning values"
c <- 2
d = 3
a
b
c
d
w1 <- 2
w2 <- c(2)
w3 <- c(2,3,7)
w4 <- c(1:10)
w5 <- c(1:4, 10)
w6 <- c(2:7, "nana", "20", 1) # Because elements of class character were added, the whole vector was converted to character
w7 <- rep(3, times = 500)
w8 <- seq(from = 7, to = 90, by =3)
w9 <- c('a1', 'a2', 'a3', 'a4', 'a5', 'a6', 'a7', 'a8', 'a9', 'a10')
w10 <- c(T, F, F, T) # vector of logical values
w1; w2; w3 # calling few elements in one line - with semicolon
w123 <- c(w1, w2, w3) # combining vectors
w123
w123 + 2
w123/2
w123 * 5
indexes <- c(2,5,10)
w9[indexes]
w9[c(2,5,10)
w9[c(2,5,10)]
w9[c(2,5,10)]
# 3. a) Convert vector vecDate <- c("09:12:12", "28:02:16", "31:05:22") to Date class.
# b) Calculate number of days between these dates and today's date.
vecDate <- c("09:12:12", "28:02:16", "31:05:22")
vecDate
vac.Date<-as.Date(vecDate)
Sys.setlocale("LC_ALL","English")
Sys.setenv(LANGUAGE='en')
vac.Date<-as.Date(vecDate)
vecDate <- c("09-12-12", "28-02-16", "31-05-22")
vecDate
vac.Date<-as.Date(vecDate)
vac.Date
vecDate <- c("2012-12-09", "2016-02-28", "2022-05-31")
vecDate
vac.Date<-as.Date(vecDate)
vac.Date
Sys.Date
a<-Sys.Date
a
a<-Sys.time
a
Sys.time()
vsToday <- c(Sys.time(),Sys.time(),Sys.time())
vecToday <- c(Sys.time(),Sys.time(),Sys.time())
vecToday
vecToday-vecDate
vecToday-vec.Date
vec.Date<-as.Date(vecDate)
vec.Date
vecToday-vec.Date
vecToday-Sys.time()
vec.Date-Sys.time()
class(vec.Date)
Sys.time()
vec.Date-as.Date(Sys.time())
vac<-c(2:8)
vac
vec<-c(2:8,17:30)
vec
# 5. Create a vector "vec2" with given structure: (2,  8, 14, 20, 26, 32). Use seq() function.
vec2<-seq(from=2,to=32,by=6)
w7
# 6. Create a vector with given structure: "2", "7", "a", "2", "7", "a", "2", "7", "a". TIP: rep()
vec3<-rep(2,7,a,times=3)
vec3
# 6. Create a vector with given structure: "2", "7", "a", "2", "7", "a", "2", "7", "a". TIP: rep()
vec3<-rep(c(2,7,a),times=3)
vec3
# 6. Create a vector with given structure: "2", "7", "a", "2", "7", "a", "2", "7", "a". TIP: rep()
vec3<-rep(c(2,7,a),times=3)
vec3
# 6. Create a vector with given structure: "2", "7", "a", "2", "7", "a", "2", "7", "a". TIP: rep()
vec3<-rep(c("2","7","a"),times=3)
vec3
# 8. Using only one line of code create a vector "vec3" with following structure:
# (1, 1, 3, 3, 5, 5, 7, 7, 9, 9, 1, 1, 3, 3, 5, 5, 7, 7, 9, 9, 1, 1, 3, 3, 5, 5, 7, 7, 9, 9).
vec3<-rep(c(1,3,5,7,9),each=2,times=15)
vec3
# 8. Using only one line of code create a vector "vec3" with following structure:
# (1, 1, 3, 3, 5, 5, 7, 7, 9, 9, 1, 1, 3, 3, 5, 5, 7, 7, 9, 9, 1, 1, 3, 3, 5, 5, 7, 7, 9, 9).
vec3<-rep(c(1,3,5,7,9),each=2,times=3)
vec3
# 9. Generate a vector "vec4" of 50 numbers with the usage of runif() function. What does
# it do? Use generated numbers to create a vector of 50 random integer values from the
# range 0-20.
vec4=runif(50,min=0,max=20)
vec4
# 11. Print values of every second element from the previously created vector,
# starting from the 5th element of the vector. TIP: seq().
vec5<-seq(vec4,from=5,by=2)
# 11. Print values of every second element from the previously created vector,
# starting from the 5th element of the vector. TIP: seq().
vec5<-seq(vec4,from=5,to=50,by=2)
# 11. Print values of every second element from the previously created vector,
# starting from the 5th element of the vector. TIP: seq().
vec5<-seq(vec4,from=5,to=50,by=2,length.out=50)
# 11. Print values of every second element from the previously created vector,
# starting from the 5th element of the vector. TIP: seq().
vec5<-seq(vec4,from=5,length.out=50,by=2)
# 11. Print values of every second element from the previously created vector,
# starting from the 5th element of the vector. TIP: seq().
vec5<-seq(vec4,from=5,to=50,by=2)
# 11. Print values of every second element from the previously created vector,
# starting from the 5th element of the vector. TIP: seq().
vec3[seq(5, 50, by = 4)]
# 11. Print values of every second element from the previously created vector,
# starting from the 5th element of the vector. TIP: seq().
length(vec3)
# 11. Print values of every second element from the previously created vector,
# starting from the 5th element of the vector. TIP: seq().
length(vec4)
vec4[seq(5, 50, by = 4)]
vec4
vec4[seq(5, 50, by = 2)]
vec4[seq(from=5,to=50,by=2)]
library(tidyverse)
library(arules)
health<-read.csv("Sleep_health_and_lifestyle_dataset.csv")
setwd("C:/Users/Bartłomiej/Desktop/UW WNE/Data Science and business analitics/unsupervised learning/association rules")
health<-read.csv("Sleep_health_and_lifestyle_dataset.csv")
health
#data summary
summary(health)
#checking data for null values
health<-health[complete.cases(health), ]
summary(health$Quality.of.Sleep)
summary(health$Age)
health$Age =  ifelse(health$Age<18, "Age below 18",
ifelse(health$Age<=24, "Age 18-24",
ifelse(health$Age<=34, "Age 25-34",
ifelse(health$Age<=44, "Age 35-44",
ifelse(health$Age<=54, "Age 45-54",
ifelse(health$Age<=64, "Age 55-64",
ifelse(health$Age>=65, "Age 65 or above", NA)))))))
summary(health$Sleep.Duration)
## sleep time in our data has min=5.8 and max 8.5
## recommended sleep time for adults is 7-9 hours - in our data there are only adults
health$Sleep.Duration =  ifelse(health$Sleep.Duration<7, "Too short sleep",
ifelse(health$Sleep.Duration<=9, "Enought sleep",
ifelse(health$Sleep.Duration>9, "Too long sleep")))
summary(health$Blood.Pressure)
summary(health$Quality.of.Sleep)
health$Quality.of.Sleep =  ifelse(health$Quality.of.Sleep<=4, "Low quality sleep",
ifelse(health$Sleep.Duration<=6, "Medium quality sleep",
ifelse(health$Sleep.Duration<=8, "Good quality sleep",
ifelse(health$Sleep.Duration<=10, "Very good quality sleep"))))
health$Quality.of.Sleep =  ifelse(health$Quality.of.Sleep<=4, "Low quality sleep",
ifelse(health$Sleep.Duration<=6, "Medium quality sleep",
ifelse(health$Sleep.Duration<=8, "Good quality sleep",
ifelse(health$Sleep.Duration>8, "Very good quality sleep"))))
summary(health$Physical.Activity.Level)
health<-read.csv("Sleep_health_and_lifestyle_dataset.csv")
health
#checking data for null values
health<-health[complete.cases(health), ]
health$Age =  ifelse(health$Age<18, "Age below 18",
ifelse(health$Age<=24, "Age 18-24",
ifelse(health$Age<=34, "Age 25-34",
ifelse(health$Age<=44, "Age 35-44",
ifelse(health$Age<=54, "Age 45-54",
ifelse(health$Age<=64, "Age 55-64",
ifelse(health$Age>=65, "Age 65 or above", NA)))))))
## sleep time in our data has min=5.8 and max 8.5
## recommended sleep time for adults is 7-9 hours - in our data there are only adults
health$Sleep.Duration =  ifelse(health$Sleep.Duration<7, "Too short sleep",
ifelse(health$Sleep.Duration<=9, "Enought sleep",
ifelse(health$Sleep.Duration>9, "Too long sleep")))
health$Quality.of.Sleep =  ifelse(health$Quality.of.Sleep<=4, "Low quality sleep",
ifelse(health$Quality.of.Sleep<=6, "Medium quality sleep",
ifelse(health$Quality.of.Sleep<=8, "Good quality sleep",
ifelse(health$Quality.of.Sleep>8, "Very good quality sleep"))))
## phisical activti level is given in minutes per day
health$Physical.Activity.Level =  ifelse(health$Physical.Activity.Level<=30, "under 30 min of physical activity a day",
ifelse(health$Physical.Activity.Level<=60, "30-60 min of physical activity a day",
ifelse(health$Physical.Activity.Level>60, "over 60 min of physical activity a day")))
setwd("C:/Users/Bartłomiej/Desktop/UW WNE/Data Science and business analitics/unsupervised learning/association rules/USL")
health<-read.csv("Sleep_health_and_lifestyle_dataset.csv")
health
#checking data for null values
health<-health[complete.cases(health), ]
health$Age =  ifelse(health$Age<18, "Age below 18",
ifelse(health$Age<=24, "Age 18-24",
ifelse(health$Age<=34, "Age 25-34",
ifelse(health$Age<=44, "Age 35-44",
ifelse(health$Age<=54, "Age 45-54",
ifelse(health$Age<=64, "Age 55-64",
ifelse(health$Age>=65, "Age 65 or above", NA)))))))
## sleep time in our data has min=5.8 and max 8.5
## recommended sleep time for adults is 7-9 hours - in our data there are only adults
health$Sleep.Duration =  ifelse(health$Sleep.Duration<7, "Too short sleep",
ifelse(health$Sleep.Duration<=9, "Enought sleep",
ifelse(health$Sleep.Duration>9, "Too long sleep")))
health$Quality.of.Sleep =  ifelse(health$Quality.of.Sleep<=4, "Low quality sleep",
ifelse(health$Quality.of.Sleep<=6, "Medium quality sleep",
ifelse(health$Quality.of.Sleep<=8, "Good quality sleep",
ifelse(health$Quality.of.Sleep>8, "Very good quality sleep"))))
## phisical activti level is given in minutes per day
health$Physical.Activity.Level =  ifelse(health$Physical.Activity.Level<=30, "under 30 min of physical activity a day",
ifelse(health$Physical.Activity.Level<=60, "30-60 min of physical activity a day",
ifelse(health$Physical.Activity.Level>60, "over 60 min of physical activity a day")))
health$Quality.of.Sleep =  ifelse(health$Quality.of.Sleep<=4, "Low quality sleep",
ifelse(health$Quality.of.Sleep<=6, "Medium quality sleep",
ifelse(health$Quality.of.Sleep<=8, "Good quality sleep",
ifelse(health$Quality.of.Sleep>8, "Very good quality sleep",NA))))
## phisical activti level is given in minutes per day
health$Physical.Activity.Level =  ifelse(health$Physical.Activity.Level<=30, "under 30 min of physical activity a day",
ifelse(health$Physical.Activity.Level<=60, "30-60 min of physical activity a day",
ifelse(health$Physical.Activity.Level>60, "over 60 min of physical activity a day",NA)))
View(health)
